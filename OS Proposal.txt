Secure Multi-User Chat System with Synchronized Messaging
Kamal Kumar N 231AI013
Pradyumna Bhat 231AI026
Sawan Kumar Yadav 231AI035


Introduction
Operating Systems Concepts:
Concurrency & Synchronization (threads, locks)
Inter-process Communication (sockets, networking)
Security (user authentication)
Real-Time Communication Systems:
Scalable client-server architecture
Public/private messaging and group chats


Research Gap
Limitations:
Many chat systems lack robust synchronization, leading to inconsistent message delivery during high concurrency.
Poorly managed authentication exposes systems to unauthorized access.
Limited support for simultaneous group chats and private messaging in lightweight implementations.
Scalability challenges when handling multiple users on a single server.


Objectives
Implement secure user authentication with hashed password storage.
Ensure message consistency using thread synchronization (locks).
Enable simultaneous interactions (public, private, group chats).
Design a scalable server-client architecture to handle 50+ concurrent users.

Block diagram of our implementation

Timeline 
Phase 
Timeline
(week)
Task
Setup & Authentication
1
Server-client setup, hashed authentication
Core Messaging
2
Public/private messages, group creation
Concurrency & Sync
3
Thread pools, locks for shared resources
Testing & Debugging
4
Stress-testing, edge cases, logging
Extras 
5
GUI, encryption, Docker deployment

Division of work
Pradyumna : Server-side logic & synchronization
Kamal : Client interface & authentication
Sawan : Group chat & message routing
